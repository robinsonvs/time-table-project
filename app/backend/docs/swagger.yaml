definitions:
  dto.CreateCourseDto:
    properties:
      location:
        type: string
      modality:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - location
    - modality
    - name
    type: object
  dto.CreateUserDto:
    properties:
      email:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.LoginDTO:
    properties:
      email:
        type: string
      password:
        maxLength: 40
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.UpdateCourseDto:
    properties:
      location:
        type: string
      modality:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  dto.UpdateUserDto:
    properties:
      email:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
    type: object
  dto.UpdateUserPasswordDto:
    properties:
      old_password:
        maxLength: 30
        minLength: 8
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - old_password
    - password
    type: object
  httperr.Fields:
    properties:
      field:
        type: string
      message:
        type: string
      value: {}
    type: object
  httperr.RestErr:
    properties:
      code:
        type: integer
      error:
        type: string
      fields:
        items:
          $ref: '#/definitions/httperr.Fields'
        type: array
      message:
        type: string
    type: object
  response.CourseResponse:
    properties:
      location:
        type: string
      modality:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  response.ManyCoursesResponse:
    properties:
      courses:
        items:
          $ref: '#/definitions/response.CourseResponse'
        type: array
    type: object
  response.ManyUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
    type: object
  response.UserAuthToken:
    properties:
      access_token:
        type: string
    type: object
  response.UserResponse:
    properties:
      email:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
info:
  contact:
    email: your@mail.com
    name: API Support
  description: This is an auto-generated API Docs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Time Table API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Auth Login
      operationId: auth-login
      parameters:
      - description: Auth Login Input
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserAuthToken'
      summary: Auth Login
      tags:
      - auth
  /courses:
    post:
      consumes:
      - application/json
      description: Endpoint for create course
      parameters:
      - description: Create course dto
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCourseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Create new course
      tags:
      - course
  /courses/{uuid}:
    delete:
      consumes:
      - application/json
      description: delete course by uuid
      parameters:
      - description: course uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Delete course
      tags:
      - course
    get:
      consumes:
      - application/json
      description: Get course by uuid
      parameters:
      - description: course uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Course details
      tags:
      - course
    patch:
      consumes:
      - application/json
      description: Endpoint for update course
      parameters:
      - description: course uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Update course dto
        in: body
        name: body
        schema:
          $ref: '#/definitions/dto.UpdateCourseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Update course
      tags:
      - course
  /courses/list-all:
    get:
      consumes:
      - application/json
      description: Get many courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ManyCoursesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Get many courses
      tags:
      - course
  /users:
    patch:
      consumes:
      - application/json
      description: Endpoint for update user
      parameters:
      - description: Update user dto
        in: body
        name: body
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Endpoint for create user
      parameters:
      - description: Create user dto
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      summary: Create new user
      tags:
      - user
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: delete user by uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get user by uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: User details
      tags:
      - user
  /users/{uuid}/password:
    patch:
      consumes:
      - application/json
      description: Endpoint for Update user password
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Update user password dto
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserPasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Update user password
      tags:
      - user
  /users/list-all:
    get:
      consumes:
      - application/json
      description: Get many users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ManyUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httperr.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperr.RestErr'
      security:
      - ApiKeyAuth: []
      summary: Get many users
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
