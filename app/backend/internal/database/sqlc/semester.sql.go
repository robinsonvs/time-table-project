// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: semester.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSemester = `-- name: CreateSemester :exec
INSERT INTO semester (uuid, semester)
VALUES ($1, $2)
`

type CreateSemesterParams struct {
	Uuid     uuid.UUID
	Semester string
}

func (q *Queries) CreateSemester(ctx context.Context, arg CreateSemesterParams) error {
	_, err := q.db.ExecContext(ctx, createSemester, arg.Uuid, arg.Semester)
	return err
}

const deleteSemester = `-- name: DeleteSemester :exec
DELETE FROM semester WHERE uuid = $1
`

func (q *Queries) DeleteSemester(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSemester, argUuid)
	return err
}

const findManySemesters = `-- name: FindManySemesters :many
SELECT s.id, s.uuid, s.semester
FROM semester s
ORDER BY s.semester ASC
`

func (q *Queries) FindManySemesters(ctx context.Context) ([]Semester, error) {
	rows, err := q.db.QueryContext(ctx, findManySemesters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Semester
	for rows.Next() {
		var i Semester
		if err := rows.Scan(&i.ID, &i.Uuid, &i.Semester); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSemesterByID = `-- name: FindSemesterByID :one
SELECT s.id, s.uuid, s.semester
FROM semester s
WHERE s.uuid = $1
`

func (q *Queries) FindSemesterByID(ctx context.Context, argUuid uuid.UUID) (Semester, error) {
	row := q.db.QueryRowContext(ctx, findSemesterByID, argUuid)
	var i Semester
	err := row.Scan(&i.ID, &i.Uuid, &i.Semester)
	return i, err
}

const getSemesterByID = `-- name: GetSemesterByID :one
SELECT id, uuid, semester from semester s where s.uuid = $1
`

func (q *Queries) GetSemesterByID(ctx context.Context, argUuid uuid.UUID) (Semester, error) {
	row := q.db.QueryRowContext(ctx, getSemesterByID, argUuid)
	var i Semester
	err := row.Scan(&i.ID, &i.Uuid, &i.Semester)
	return i, err
}

const updateSemester = `-- name: UpdateSemester :exec
UPDATE semester SET
    semester = COALESCE($2, semester)
WHERE uuid = $1
`

type UpdateSemesterParams struct {
	Uuid     uuid.UUID
	Semester sql.NullString
}

func (q *Queries) UpdateSemester(ctx context.Context, arg UpdateSemesterParams) error {
	_, err := q.db.ExecContext(ctx, updateSemester, arg.Uuid, arg.Semester)
	return err
}
