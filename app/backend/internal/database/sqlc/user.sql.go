// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (uuid, name, email, password)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Uuid     uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Uuid,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE uuid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, argUuid)
	return err
}

const findManyUsers = `-- name: FindManyUsers :many
SELECT u.id, u.uuid, u.name, u.email
FROM users u
ORDER BY u.name ASC
`

type FindManyUsersRow struct {
	ID    int64
	Uuid  uuid.UUID
	Name  string
	Email string
}

func (q *Queries) FindManyUsers(ctx context.Context) ([]FindManyUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, findManyUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindManyUsersRow
	for rows.Next() {
		var i FindManyUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT u.id, u.uuid, u.name, u.email FROM users u WHERE u.email = $1
`

type FindUserByEmailRow struct {
	ID    int64
	Uuid  uuid.UUID
	Name  string
	Email string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT u.id, u.uuid, u.name, u.email
FROM users u
WHERE u.uuid = $1
`

type FindUserByIDRow struct {
	ID    int64
	Uuid  uuid.UUID
	Name  string
	Email string
}

func (q *Queries) FindUserByID(ctx context.Context, argUuid uuid.UUID) (FindUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, argUuid)
	var i FindUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, uuid, name, email, password from users u where u.uuid = $1
`

func (q *Queries) GetUserByID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, argUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT u.password FROM users u WHERE u.uuid = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, argUuid uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, argUuid)
	var password string
	err := row.Scan(&password)
	return password, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $2 WHERE uuid = $1
`

type UpdatePasswordParams struct {
	Uuid     uuid.UUID
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Uuid, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
                 name = COALESCE($2, name),
                 email = COALESCE($3, email)
WHERE uuid = $1
`

type UpdateUserParams struct {
	Uuid  uuid.UUID
	Name  sql.NullString
	Email sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Uuid, arg.Name, arg.Email)
	return err
}
