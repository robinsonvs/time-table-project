// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: professor.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProfessor = `-- name: CreateProfessor :exec
INSERT INTO professor (uuid, name, hoursToAllocate)
VALUES ($1, $2, $3)
`

type CreateProfessorParams struct {
	Uuid            uuid.UUID
	Name            string
	Hourstoallocate int32
}

func (q *Queries) CreateProfessor(ctx context.Context, arg CreateProfessorParams) error {
	_, err := q.db.ExecContext(ctx, createProfessor, arg.Uuid, arg.Name, arg.Hourstoallocate)
	return err
}

const deleteProfessor = `-- name: DeleteProfessor :exec
DELETE FROM professor WHERE uuid = $1
`

func (q *Queries) DeleteProfessor(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfessor, argUuid)
	return err
}

const findManyProfessors = `-- name: FindManyProfessors :many
SELECT p.id, p.uuid, p.name, p.hoursToAllocate
FROM professor p
ORDER BY p.name ASC
`

func (q *Queries) FindManyProfessors(ctx context.Context) ([]Professor, error) {
	rows, err := q.db.QueryContext(ctx, findManyProfessors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Professor
	for rows.Next() {
		var i Professor
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Hourstoallocate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProfessorByID = `-- name: FindProfessorByID :one
SELECT p.id, p.uuid, p.name, p.hoursToAllocate
FROM professor p
WHERE p.uuid = $1
`

func (q *Queries) FindProfessorByID(ctx context.Context, argUuid uuid.UUID) (Professor, error) {
	row := q.db.QueryRowContext(ctx, findProfessorByID, argUuid)
	var i Professor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Hourstoallocate,
	)
	return i, err
}

const getProfessorByID = `-- name: GetProfessorByID :one
SELECT id, uuid, name, hourstoallocate from professor p where p.uuid = $1
`

func (q *Queries) GetProfessorByID(ctx context.Context, argUuid uuid.UUID) (Professor, error) {
	row := q.db.QueryRowContext(ctx, getProfessorByID, argUuid)
	var i Professor
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Hourstoallocate,
	)
	return i, err
}

const updateProfessor = `-- name: UpdateProfessor :exec
UPDATE professor SET
    name = COALESCE($2, semester),
    hoursToAllocate = COALESCE($3, hoursToAllocate)
WHERE uuid = $1
`

type UpdateProfessorParams struct {
	Uuid            uuid.UUID
	Name            sql.NullString
	HoursToAllocate sql.NullInt32
}

func (q *Queries) UpdateProfessor(ctx context.Context, arg UpdateProfessorParams) error {
	_, err := q.db.ExecContext(ctx, updateProfessor, arg.Uuid, arg.Name, arg.HoursToAllocate)
	return err
}
