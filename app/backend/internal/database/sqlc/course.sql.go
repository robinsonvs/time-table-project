// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: course.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :exec
INSERT INTO course (uuid, name, modality, location)
VALUES ($1, $2, $3, $4)
`

type CreateCourseParams struct {
	Uuid     uuid.UUID
	Name     string
	Modality string
	Location string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) error {
	_, err := q.db.ExecContext(ctx, createCourse,
		arg.Uuid,
		arg.Name,
		arg.Modality,
		arg.Location,
	)
	return err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM course WHERE uuid = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, argUuid)
	return err
}

const findCourseByID = `-- name: FindCourseByID :one
SELECT c.id, c.uuid, c.name, c.modality, c.location
FROM course c
WHERE c.uuid = $1
`

func (q *Queries) FindCourseByID(ctx context.Context, argUuid uuid.UUID) (Course, error) {
	row := q.db.QueryRowContext(ctx, findCourseByID, argUuid)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Modality,
		&i.Location,
	)
	return i, err
}

const findManyCourses = `-- name: FindManyCourses :many
SELECT c.id, c.uuid, c.name, c.modality, c.location
FROM course c
ORDER BY c.name ASC
`

func (q *Queries) FindManyCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, findManyCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Modality,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT id, uuid, name, modality, location from course c where c.uuid = $1
`

func (q *Queries) GetCourseByID(ctx context.Context, argUuid uuid.UUID) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourseByID, argUuid)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Modality,
		&i.Location,
	)
	return i, err
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE course SET
                 name = COALESCE($2, name),
                 modality = COALESCE($3, modality),
                 location = COALESCE($4, location)
WHERE uuid = $1
`

type UpdateCourseParams struct {
	Uuid     uuid.UUID
	Name     sql.NullString
	Modality sql.NullString
	Location sql.NullString
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.ExecContext(ctx, updateCourse,
		arg.Uuid,
		arg.Name,
		arg.Modality,
		arg.Location,
	)
	return err
}
