// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: parameterization.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createParameterization = `-- name: CreateParameterization :exec
INSERT INTO parameterization (uuid, maxCreditsToOffer, numClassesPerDiscipline, semester_id, course_id)
VALUES ($1, $2, $3, $4, $5)
`

type CreateParameterizationParams struct {
	Uuid                    uuid.UUID
	Maxcreditstooffer       int32
	Numclassesperdiscipline int32
	SemesterID              int64
	CourseID                int64
}

func (q *Queries) CreateParameterization(ctx context.Context, arg CreateParameterizationParams) error {
	_, err := q.db.ExecContext(ctx, createParameterization,
		arg.Uuid,
		arg.Maxcreditstooffer,
		arg.Numclassesperdiscipline,
		arg.SemesterID,
		arg.CourseID,
	)
	return err
}

const deleteParameterization = `-- name: DeleteParameterization :exec
DELETE FROM parameterization WHERE uuid = $1
`

func (q *Queries) DeleteParameterization(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteParameterization, argUuid)
	return err
}

const findManyParameterizations = `-- name: FindManyParameterizations :many
SELECT p.id, p.uuid, p.maxCreditsToOffer, p.numClassesPerDiscipline, p.semester_id, p.course_id
FROM parameterization p
ORDER BY p.semester_id, p.course_id ASC
`

func (q *Queries) FindManyParameterizations(ctx context.Context) ([]Parameterization, error) {
	rows, err := q.db.QueryContext(ctx, findManyParameterizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parameterization
	for rows.Next() {
		var i Parameterization
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Maxcreditstooffer,
			&i.Numclassesperdiscipline,
			&i.SemesterID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyParameterizationsBySemesterId = `-- name: FindManyParameterizationsBySemesterId :many
SELECT p.id, p.uuid, p.maxCreditsToOffer, p.numClassesPerDiscipline, p.semester_id, p.course_id
FROM parameterization p
WHERE p.semester_id = $1
ORDER BY p.course_id ASC
`

func (q *Queries) FindManyParameterizationsBySemesterId(ctx context.Context, semesterID int64) ([]Parameterization, error) {
	rows, err := q.db.QueryContext(ctx, findManyParameterizationsBySemesterId, semesterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parameterization
	for rows.Next() {
		var i Parameterization
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Maxcreditstooffer,
			&i.Numclassesperdiscipline,
			&i.SemesterID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findParameterizationByID = `-- name: FindParameterizationByID :one
SELECT p.id, p.uuid, p.maxCreditsToOffer, p.numClassesPerDiscipline, p.semester_id, p.course_id
FROM parameterization p
WHERE p.uuid = $1
`

func (q *Queries) FindParameterizationByID(ctx context.Context, argUuid uuid.UUID) (Parameterization, error) {
	row := q.db.QueryRowContext(ctx, findParameterizationByID, argUuid)
	var i Parameterization
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Maxcreditstooffer,
		&i.Numclassesperdiscipline,
		&i.SemesterID,
		&i.CourseID,
	)
	return i, err
}

const getParameterizationByID = `-- name: GetParameterizationByID :one
SELECT id, uuid, maxcreditstooffer, numclassesperdiscipline, semester_id, course_id from parameterization p where p.uuid = $1
`

func (q *Queries) GetParameterizationByID(ctx context.Context, argUuid uuid.UUID) (Parameterization, error) {
	row := q.db.QueryRowContext(ctx, getParameterizationByID, argUuid)
	var i Parameterization
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Maxcreditstooffer,
		&i.Numclassesperdiscipline,
		&i.SemesterID,
		&i.CourseID,
	)
	return i, err
}

const updateParameterization = `-- name: UpdateParameterization :exec
UPDATE parameterization SET
    maxCreditsToOffer = COALESCE($2, maxCreditsToOffer),
    numClassesPerDiscipline = COALESCE($3, numClassesPerDiscipline)
WHERE uuid = $1
`

type UpdateParameterizationParams struct {
	Uuid                    uuid.UUID
	MaxCreditsToOffer       sql.NullInt32
	NumClassesPerDiscipline sql.NullInt32
}

func (q *Queries) UpdateParameterization(ctx context.Context, arg UpdateParameterizationParams) error {
	_, err := q.db.ExecContext(ctx, updateParameterization, arg.Uuid, arg.MaxCreditsToOffer, arg.NumClassesPerDiscipline)
	return err
}
