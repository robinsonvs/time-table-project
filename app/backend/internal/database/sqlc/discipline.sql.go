// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: discipline.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDiscipline = `-- name: CreateDiscipline :exec
INSERT INTO discipline (uuid, name, credits, course_id)
VALUES ($1, $2, $3, $4)
`

type CreateDisciplineParams struct {
	Uuid     uuid.UUID
	Name     string
	Credits  int32
	CourseID int64
}

func (q *Queries) CreateDiscipline(ctx context.Context, arg CreateDisciplineParams) error {
	_, err := q.db.ExecContext(ctx, createDiscipline,
		arg.Uuid,
		arg.Name,
		arg.Credits,
		arg.CourseID,
	)
	return err
}

const deleteDiscipline = `-- name: DeleteDiscipline :exec
DELETE FROM discipline WHERE uuid = $1
`

func (q *Queries) DeleteDiscipline(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDiscipline, argUuid)
	return err
}

const findDisciplineByID = `-- name: FindDisciplineByID :one
SELECT d.id, d.uuid, d.name, d.credits, d.course_id
FROM discipline d
WHERE d.uuid = $1
`

func (q *Queries) FindDisciplineByID(ctx context.Context, argUuid uuid.UUID) (Discipline, error) {
	row := q.db.QueryRowContext(ctx, findDisciplineByID, argUuid)
	var i Discipline
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Credits,
		&i.CourseID,
	)
	return i, err
}

const findManyDisciplines = `-- name: FindManyDisciplines :many
SELECT d.id, d.uuid, d.name, d.credits, d.course_id
FROM discipline d
ORDER BY d.course_id, d.name ASC
`

func (q *Queries) FindManyDisciplines(ctx context.Context) ([]Discipline, error) {
	rows, err := q.db.QueryContext(ctx, findManyDisciplines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discipline
	for rows.Next() {
		var i Discipline
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Credits,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findManyDisciplinesByCourseId = `-- name: FindManyDisciplinesByCourseId :many
SELECT d.id, d.uuid, d.name, d.credits, d.course_id
FROM discipline d
WHERE d.course_id = $1
ORDER BY d.name ASC
`

func (q *Queries) FindManyDisciplinesByCourseId(ctx context.Context, courseID int64) ([]Discipline, error) {
	rows, err := q.db.QueryContext(ctx, findManyDisciplinesByCourseId, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discipline
	for rows.Next() {
		var i Discipline
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Credits,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDisciplineByID = `-- name: GetDisciplineByID :one
SELECT id, uuid, name, credits, course_id from discipline d where d.uuid = $1
`

func (q *Queries) GetDisciplineByID(ctx context.Context, argUuid uuid.UUID) (Discipline, error) {
	row := q.db.QueryRowContext(ctx, getDisciplineByID, argUuid)
	var i Discipline
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Credits,
		&i.CourseID,
	)
	return i, err
}

const updateDiscipline = `-- name: UpdateDiscipline :exec
UPDATE discipline SET
    name = COALESCE($2, name),
    credits = COALESCE($3, credits)
WHERE uuid = $1
`

type UpdateDisciplineParams struct {
	Uuid    uuid.UUID
	Name    sql.NullString
	Credits sql.NullInt32
}

func (q *Queries) UpdateDiscipline(ctx context.Context, arg UpdateDisciplineParams) error {
	_, err := q.db.ExecContext(ctx, updateDiscipline, arg.Uuid, arg.Name, arg.Credits)
	return err
}
